// Jenkinsfile (Declarative Pipeline)
// Author:CodeFilmsPLC
// Docker + Jenkins
pipeline {
   agent any
   
   // make the docker tag dynamic
   parameters {
      string(name: 'dockerTagName', defaultValue: 'alpha', description: 'docker tag id name')
   }
   
   stages {
      stage('Build') {
         steps {
            sh('echo Building stage')
            sh('mvn clean package')
         }
      }
      
      // there is docker..
      stage('Containerize') {
         steps {
            sh('echo Containerization stage')
            // get the dockerfile
            // run docker user
            sh('echo building docker image')
            sh('echo ${dockerTagName}')
            sh('echo $BUILD_NUMBER')
             
            sh('docker build . -t  codefilmsplc/jenkins-docker-app:${dockerTagName}-$BUILD_NUMBER')
             
            //login to docker       
            sh('echo logging to docker hub')
            sh('docker login -u "\"wearecodefilms@gmail.com\"" -p "\"devPwd2024!"\" docker.io')
            
            //send the image to the hub
            sh('echo pushing docker image to cloud')
            sh('docker image push codefilmsplc/jenkins-docker-app:${dockerTagName}-$BUILD_NUMBER')
            
         }
         
         
      }
      
      
      stage('Deployment') {
         steps {
            sh('echo Deployment stage')
            // get the dockerfile --
            sh('echo log into legacy server for deployment')
            // log onto the legacy server
            sh('ssh -o StrictHostKeyChecking=no appuser@192.168.74.112 "docker pull codefilmsplc/jenkins-docker-app:${dockerTagName}-$BUILD_NUMBER > /dev/null 2>&1 &"')
            //send the image to the hub
            sh('ssh -o StrictHostKeyChecking=no appuser@192.168.74.112 "docker run -p 8082:8082 codefilmsplc/jenkins-docker-app:${dockerTagName}-$BUILD_NUMBER > /dev/null 2>&1 &"')
            
         }
         
         
      }
      
      
      
      stage('End') {
         steps {
            sh('exit')
         }
      }
      
   }
   
}